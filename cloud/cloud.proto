syntax = "proto3";

package particle.deviceos.cloud;

import public "value.proto";
import public "system_defs.proto";

//
// Common definitions
//

enum ContentType {
  CONTENT_TYPE_TEXT = 0;
}

message ErrorResponse {
  int32 code = 1;
  string message = 2;
}

//
// Handshake
//

enum ClientDisconnectReason {
    CLIENT_DISCONNECT_REASON_NONE = 0;
    CLIENT_DISCONNECT_REASON_PLANNED = 1;
    CLIENT_DISCONNECT_REASON_CONNECTION_ERROR = 2; // Cloud connection error
    CLIENT_DISCONNECT_REASON_NETWORK_ERROR = 3; // Network connection error
    CLIENT_DISCONNECT_REASON_NETWORK_DISCONNECT = 4;
    CLIENT_DISCONNECT_REASON_LISTENING_MODE = 5;
    CLIENT_DISCONNECT_REASON_SYSTEM_RESET = 6;
    CLIENT_DISCONNECT_REASON_SYSTEM_SLEEP = 7;
    CLIENT_DISCONNECT_REASON_FIRMWARE_UPDATE = 8;
    CLIENT_DISCONNECT_REASON_OTHER = 9; // A message string must present in the payload if this code is used
}

enum ServerDisconnectReason {
  SERVER_DISCONNECT_REASON_NONE = 0;
  // TBD
}

message ClientDisconnectSystemResetInfo {
  SystemResetReason reset_reason = 1;
  oneof info { // Additional info
    PanicCode panic_code = 2; // reset_reason == SYSTEM_RESET_REASON_PANIC
  }
}

message ClientDisconnectSystemSleepInfo {
  uint32 sleep_duration = 1; // Expected sleep duration in seconds
}

message ClientDisconnectInfo {
  ClientDisconnectReason reason = 1;
  bool requested_by_user = 2;
  string message = 3;
  oneof info { // Additional info
    ClientDisconnectSystemResetInfo system_reset = 4; // reason == CLIENT_DISCONNECT_REASON_SYSTEM_RESET
    ClientDisconnectSystemSleepInfo system_sleep = 5; // reason == CLIENT_DISCONNECT_REASON_SYSTEM_SLEEP
  }
}

message ServerDisconnectInfo {
  ServerDisconnectReason reason = 1;
  string message = 2;
}

message HelloRequest { // Client to server
  bytes device_id = 1; // Optional if the client session is resumed
  uint32 product_id = 2; // ditto
  uint32 system_version = 3; // ditto
  bytes app_state_checksum = 4; // // SHA-256 checksum of the current application state (see AppState)
  bytes system_state_checksum = 5; // SHA-256 checksum of the current system state (see SystemState)
  ClientDisconnectInfo last_disconnect_info = 6;
  bool safe_mode = 7;
}

message HelloResponse {
  fixed64 request_time = 1; // Time, in milliseconds since the epoch, when the HelloRequest was received
  uint32 response_delay = 2; // Time, in milliseconds, between when the HelloRequest was received and when this response was sent
  bool client_state_request_pending = 3; // Whether the server is about to send a ClientStateRequest to the client
  bool update_pending = 4;
}

message ClientGoodbyeRequest { // Client to server
  ClientDisconnectInfo disconnect_info = 1;
}

message ClientGoodbyeResponse {
}

message ServerGoodbyeRequest { // Server to client
  ServerDisconnectInfo disconnect_info = 1;
  bool invalidate_session = 2; // Whether the client has to invalidate the session before reconnecting to the server
}

message ServerGoodbyeResponse {
}

//
// System/application state
//

enum ClientStateFlag {
  CLIENT_STATE_FLAG_NONE = 0;
  CLIENT_STATE_FLAG_FUNCTIONS = 0x01;
  CLIENT_STATE_FLAG_VARIABLES = 0x02;
  CLIENT_STATE_FLAG_SUBSCRIPTIONS = 0x04;
  CLIENT_STATE_FLAG_FIRMWARE_MODULES = 0x08;
  CLIENT_STATE_FLAG_CAPABILITIES = 0x10;
  CLIENT_STATE_FLAG_ADDITIONAL_INFO = 0x20;
  CLIENT_STATE_FLAG_CONFIG = 0x40;
}

enum FirmwareModuleType {
  FIRMWARE_MODULE_TYPE_INVALID = 0;
  FIRMWARE_MODULE_TYPE_SYSTEM_PART = 1;
  FIRMWARE_MODULE_TYPE_USER_PART = 2;
  FIRMWARE_MODULE_TYPE_BOOTLOADER = 3;
  FIRMWARE_MODULE_TYPE_RADIO_STACK = 4;
  FIRMWARE_MODULE_TYPE_NCP_FIRMWARE = 5;
}

enum SystemConfigParamId {
  SYSTEM_CONFIG_PARAM_ID_INVALID = 0;
  SYSTEM_CONFIG_PARAM_ID_PING_INTERVAL = 1; // int32
  SYSTEM_CONFIG_PARAM_ID_UPDATES_ENABLED = 2; // bool
}

message FunctionInfo {
  string name = 1;
}

message VariableInfo {
  string name = 1;
  ValueType type = 2;
}

message SubscriptionInfo {
  string prefix = 1;
  bool blockwise_transfer = 2; // Whether the client opted to use blockwise transfer to receive these events
}

message ConfigParamId {
  oneof value {
    uint32 uint32 = 1; // SystemConfigParamId
    string string = 2; // Application-specific parameter ID
  }
}

message ConfigParamInfo {
  ConfigParamId id = 1;
  ValueType type = 2;
}

message ConfigParam {
  ConfigParamId id = 1;
  Value value = 2;
}

message DiagnosticId {
  oneof value {
    uint32 uint32 = 1; // SystemDiagnosticId or legacy application-specific diagnostic ID
    string string = 2; // Application-specific diagnostic ID
  }
}

message DiagnosticInfo {
  DiagnosticId id = 1;
  ValueType type = 2;
}

// Application capabilities can't be changed without starting a new session
message AppCapabilities {
  repeated ConfigParamInfo config_params = 1; // Supported configuration parameters
  repeated DiagnosticInfo diagnostics = 2; // Supported diagnostics
}

message AppState {
  repeated FunctionInfo functions = 1;
  repeated VariableInfo variables = 2;
  repeated SubscriptionInfo subscriptions = 3;
  AppCapabilities capabilities = 4;
  repeated ConfigParam config = 5;
  uint32 rev_num = 6; // Incremented every time the application state changes (1-based)
  bytes checksum = 7; // SHA-256 checksum of the current application state
}

message FirmwareModuleDependencyInfo {
  FirmwareModuleType type = 1;
  uint32 index = 2;
  uint32 version = 3;
}

message FirmwareModuleInfo {
  FirmwareModuleType type = 1;
  uint32 index = 2;
  uint32 version = 3;
  repeated FirmwareModuleDependencyInfo dependencies = 4;
  bytes checksum = 5;
  bool checksum_valid = 6;
}

// System capabilities can't be changed without starting a new session
message SystemCapabilities {
  uint32 max_message_size = 1; // Maximum supported size of a CoAP message
  uint32 max_update_chunk_size = 2; // Maximum supported size of a firmware update chunk
  uint32 max_update_file_size = 3; // Maximum supported size of a firmware update file
  uint32 ack_timeout = 4; // Value of the CoAP's ACK_TIMEOUT parameter used by the client
  uint32 exchange_lifetime = 5; // Value of the CoAP's EXCHANGE_LIFETIME parameter used by the client
}

message AdditionalSystemInfo {
  string iccid = 1;
  string imei = 2;
  string modem_firmware_version = 3;
}

message SystemState {
  repeated FirmwareModuleInfo firmware_modules = 1;
  SystemCapabilities capabilities = 2;
  AdditionalSystemInfo info = 3;
  repeated ConfigParam config = 4;
  uint32 rev_num = 5; // Incremented every time the system state changes (1-based)
  bytes checksum = 6; // SHA-256 checksum of the current system state
}

message ClientState {
  AppState app_state = 1;
  SystemState system_state = 2;
  uint32 state_flags = 3; // Flags defined by the ClientStateFlag enum
}

message ClientStateRequest { // Server to client
  uint32 state_flags = 1; // Flags defined by the ClientStateFlag enum
}

message ClientStateResponse {
  ClientState state = 1;
}

message ClientStateChangedRequest { // Client to server
  ClientState state = 1;
  bytes app_state_checksum_before = 2; // Checksum of the application state before this change
  bytes system_state_checksum_before = 3; // Checksum of the system state before this change
}

message ClientStateChangedResponse {
  bool client_state_request_pending = 1; // Whether the server is about to send a ClientStateRequest to the client
}

message SetConfigParamRequest { // Server to client
  repeated ConfigParam params = 1;
}

message SetConfigParamResponse {
  ClientState state = 1;
  bytes app_state_checksum_before = 2; // Checksum of the application state before this change
  bytes system_state_checksum_before = 3; // Checksum of the system state before this change
}

message GetConfigParamRequest { // Server to client
  repeated ConfigParamId ids = 1;
}

message GetConfigParamResponse {
  repeated ConfigParam params = 1;
}

message ClaimDeviceRequest { // Device to server
  bytes claim_code = 1;
}

message ClaimDeviceResponse {
}

message DeviceClaimedRequest { // Server to device
  bool claimed = 1;
}

message DeviceClaimedResponse {
}

//
// Function calls
//

message FunctionCallRequest { // Server to client
  // The function name is passed via the request URI
  repeated Value args = 1;
}

message FunctionCallResponse {
  Value result = 1;
}

//
// Variable requests
//

message VariableValueRequest { // Server to client
  // The variable name is passed via the request URI
}

message VariableValueResponse {
  Value value = 1;
}

//
// Events
//

message EventRequest { // Bidirectional
  // The event name is passed via the request URI
  bytes data = 1;
  // The remaining fields are optional if this request carries a continuation of the event data
  ContentType content_type = 2;
  fixed64 timestamp = 3;
}

message EventResponse {
}

//
// Diagnostics
//

message DiagnosticError {
  int32 code = 1;
  string message = 2;
}

message DiagnosticValue {
  DiagnosticId id = 1;
  oneof result {
    Value value = 2;
    DiagnosticError error = 3;
  }
}

message GetDiagnosticsRequest { // Server to client
  repeated DiagnosticId ids = 1;
}

message GetDiagnosticsResponse {
  repeated DiagnosticValue diagnostics = 1;
}

//
// Firmware updates
//

message UpdateStats {
  uint32 received_chunks = 1;
  uint32 duplicate_chunks = 2;
  uint32 out_of_order_chunks = 3;
  uint32 sent_acks = 4;
  uint32 processing_time = 5;
}

message UpdatePendingRequest { // Server to client
  bool update_pending = 1;
}

message UpdatePendingResponse {
}

message StartUpdateRequest { // Server to client
  uint32 file_size = 1;
  bytes file_checksum = 2; // SHA-256 checksum of the file contents
  uint32 chunk_size = 3;
  bool update_forced = 4;
  bool discard_data = 5; // Whether to discard any previously cached firmware update state
}

message StartUpdateResponse {
  uint32 window_size = 1;
  uint32 start_offset = 2;
}

message FinishUpdateRequest { // Server to client
  bool cancel_update = 1;
  bool discard_data = 2;
}

message FinishUpdateResponse {
  UpdateStats stats = 1;
}

message UpdateChunkDataRequest { // Server to client (response is not sent)
  uint32 index = 1;
  bytes data = 2;
}

message UpdateChunkAckRequest { // Client to server (response is not sent)
  uint32 cumul_ack_index = 1;
  uint32 last_ack_index = 2;
  repeated uint32 gap_indices = 3; // Bitmask of chunk indices
}

//
// Miscellaneous
//

message TimeRequest { // Device to server
}

message TimeResponse {
  fixed64 request_time = 1; // Time, in milliseconds since the epoch, when the TimeRequest was received
  uint32 response_delay = 2; // Time, in milliseconds, between when the TimeRequest was received and when this response was sent
}

message PingRequest {
}

message PingResponse {
}

message StartSignalRequest {
}

message StartSignalResponse {
}

message StopSignalRequest {
}

message StopSignalResponse {
}
