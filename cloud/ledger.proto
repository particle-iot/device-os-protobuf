syntax = "proto3";

package particle.cloud;

import "common/ledger.proto";

/**
 * Ledger request.
 */
message LedgerRequest {
  /**
   * Request type.
   */
  enum Type {
    INVALID_TYPE = 0; ///< Invalid request type.
    LIST_LEDGERS = 1; ///< List organization/product ledgers.
    GET_PAGE = 2; ///< Get page contents.
    SYNC_PAGE = 3; ///< Sync page contents.
    SUBSCRIBE = 4; ///< Subscribe to page notifications.
    UNSUBSCRIBE = 5; ///< Unsubscribe from page notifications.
    NOTIFY_PAGE_CHANGED = 6; ///< Notify about page changes.
  }

  /**
   * List organization/product ledgers.
   *
   * This request can only be sent by the device.
   */
  message ListLedgers {
  }

  /**
   * Get page contents.
   *
   * This request can be sent by the device and server.
   */
  message GetPage {
    optional string ledger_name = 1; ///< Ledger name. If not set, the device ledger is used.
    string page_name = 2; ///< Page name.
  }

  /**
   * Sync page contents.
   *
   * This request can only be sent by the device.
   */
  message SyncPage {
    optional string ledger_name = 1; ///< Ledger name. If not set, the device ledger is used.
    string page_name = 2; ///< Page name.
    bytes page_checksum = 3; ///< Page checksum before the update.
    repeated particle.ledger.PageUpdateSet updates = 4; ///< Update operations.
  }

  /**
   * Subscribe to page notifications.
   *
   * This request can only be sent by the device.
   */
  message Subscribe {
    optional string ledger_name = 1; ///< Ledger name. If not set, the device ledger is used.
    repeated string page_names = 2; ///< Page names.
  }

  /**
   * Unsubscribe from page notifications.
   *
   * This request can only be sent by the device.
   */
  message Unsubscribe {
    optional string ledger_name = 1; ///< Ledger name. If not set, the device ledger is used.
    repeated string page_names = 2; ///< Page names.
  }

  /**
   * Notify about page changes.
   *
   * This request can only be sent by the server.
   */
  message NotifyPageChanged {
    /**
     * List of changed entries of a page.
     */
    message PageChange {
      string page_name = 1; ///< Page name.
      repeated string entry_names = 2; ///< Names of changed entries.
    }

    /**
     * List of changed pages of a ledger.
     */
    message LedgerChange {
      optional string ledger_name = 1; ///< Ledger name. If not set, it is the device ledger that changed.
      repeated PageChange page_changes = 2; ///< Changed pages.
    }

    repeated LedgerChange ledger_changes = 1; ///< Changed ledgers.
  }

  Type type = 1; ///< Request type.

  oneof request {
    ListLedgers list_ledgers = 2;
    GetPage get_page = 3;
    SyncPage sync_page = 4;
    Subscribe subscribe = 5;
    Unsubscribe unsubscribe = 6;
    NotifyPageChanged notify_page_changed = 7;
  }
}

/**
 * Ledger response.
 */
message LedgerResponse {
  /**
   * Result code.
   */
  enum Result {
    OK = 0;
    LEDGER_NOT_FOUND = 1;
  }

  /**
   * List organization/product ledgers.
   */
  message ListLedgers {
    /**
     * Ledger.
     */
    message Ledger {
      string name = 1; ///< Ledger name.
      particle.ledger.LedgerScope scope = 2; ///< Ledger scope.
    }

    repeated Ledger ledgers = 1; ///< List of ledgers.
  }

  /**
   * Get page contents.
   */
  message GetPage {
    particle.ledger.PageData data = 1; ///< Page data.
    bytes checksum = 2; ///< Page checksum.
  }

  /**
   * Sync page contents.
   */
  message SyncPage {
    // TODO: Send a diff or list of update operations for recreating the resulting contents of the page
    particle.ledger.PageData data = 1; ///< Page data.
    bytes checksum = 2; ///< Page checksum after the update.
  }

  /**
   * Subscribe to page notifications.
   */
  message Subscribe {
  }

  /**
   * Unsubscribe from page notifications.
   */
  message Unsubscribe {
  }

  /**
   * Notify about page changes.
   */
  message NotifyPageChanged {
  }

  Result result = 1;
  optional string error_message = 2;

  oneof response {
    ListLedgers list_ledgers = 3;
    GetPage get_page = 4;
    SyncPage sync_page = 5;
    Subscribe subscribe = 6;
    Unsubscribe unsubscribe = 7;
    NotifyPageChanged notify_page_changed = 8;
  }
}
