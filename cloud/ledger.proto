syntax = "proto3";

package particle.cloud;

import "common/ledger.proto";

/**
 * Ledger request.
 */
message LedgerRequest {
  /**
   * Request type.
   */
  enum Type {
    INVALID_TYPE = 0; ///< Invalid request type.
    LIST_LEDGERS = 1; ///< List organization/product ledgers.
    GET_PAGE = 2; ///< Get page contents.
    SYNC_PAGE = 3; ///< Sync page contents.
    SUBSCRIBE = 4; ///< Subscribe to page notifications.
    UNSUBSCRIBE = 5; ///< Unsubscribe from page notifications.
    NOTIFY_PAGE_CHANGED = 6; ///< Notify about page changes.
  }

  /**
   * Get the list of ledgers.
   *
   * This request can only be sent by the device.
   */
  message ListLedgers {
    repeated ledger.LedgerScope scopes = 1; ///< Scope filter.
  }

  /**
   * Get page contents.
   *
   * This request can be sent by the device and server.
   */
  message GetPage {
    string ledger_name = 1; ///< Ledger name.
    ledger.LedgerScope scope = 2; ///< Ledger scope.
    string page_name = 3; ///< Page name.
  }

  /**
   * Sync page contents.
   *
   * This request can only be sent by the device.
   */
  message SyncPage {
    /**
     * Sync strategy.
     */
    enum Strategy {
      INVALID_STRATEGY = 0; ///< Invalid strategy.
      PREFER_DEVICE_CHANGES = 1; ///< Prefer device changes.
      PREFER_SERVER_CHANGES = 2; ///< Prefer server changes.
    }

    string ledger_name = 1; ///< Ledger name.
    ledger.LedgerScope scope = 2; ///< Ledger scope.
    string page_name = 3; ///< Page name.
    /**
     * Last time the page was changed, in milliseconds since the Unix epoch.
     *
     * If not set, the time is unknown.
     */
    optional fixed64 updated_at = 4;
    optional Strategy strategy = 5; ///< Sync strategy. If not set, the default strategy is used.
    /**
     * MessagePack-encoded page contents.
     *
     * If not set, the server may request the actual page contents via a `GET_PAGE` request while
     * the sync request is being processed.
     */
    optional bytes data = 6;
  }

  /**
   * Subscribe to page notifications.
   *
   * This request can only be sent by the device.
   */
  message Subscribe {
    /**
     * List of ledger pages.
     */
    message LedgerPages {
      string ledger_name = 1; ///< Ledger name.
      ledger.LedgerScope scope = 2; ///< Ledger scope.
      repeated string page_names = 3; ///< Page names.
    }

    repeated LedgerPages ledger_pages = 1; ///< List of ledger pages.
    bool resubscribe = 2; ///< Whether to add to or override the current subscriptions.
  }

  /**
   * Unsubscribe from page notifications.
   *
   * This request can only be sent by the device.
   */
  message Unsubscribe {
    /**
     * List of ledger pages.
     */
    message LedgerPages {
      string ledger_name = 1; ///< Ledger name.
      ledger.LedgerScope scope = 2; ///< Ledger scope.
      repeated string page_names = 3; ///< Page names.
    }

    repeated LedgerPages ledger_pages = 1; ///< List of ledger pages.
    bool unsubscribe_all = 2; ///< Whether to unsubscribe from all notifications.
  }

  /**
   * Notify about page changes.
   *
   * This request can only be sent by the server.
   */
  message NotifyPageChanged {
    /**
     * List of changed ledger pages.
     */
    message LedgerPages {
      string ledger_name = 1; ///< Ledger name.
      ledger.LedgerScope scope = 2; ///< Ledger scope.
      repeated string page_names = 3; ///< Page names.
    }

    repeated LedgerPages ledger_pages = 1; ///< List of changed ledger pages.
  }

  optional Type type = 1; ///< Request type. Must be set if none of the request-specific fields are set.

  oneof request { ///< Request data.
    ListLedgers list_ledgers = 2;
    GetPage get_page = 3;
    SyncPage sync_page = 4;
    Subscribe subscribe = 5;
    Unsubscribe unsubscribe = 6;
    NotifyPageChanged notify_page_changed = 7;
  }
}

/**
 * Ledger response.
 */
message LedgerResponse {
  /**
   * Result code.
   */
  enum Result {
    OK = 0;
    LEDGER_NOT_FOUND = 1;
  }

  /**
   * Get the list of ledgers.
   */
  message ListLedgers {
    /**
     * Ledger info.
     */
    message Ledger {
      string name = 1; ///< Ledger name.
      ledger.LedgerScope scope = 2; ///< Ledger scope.
    }

    repeated Ledger ledgers = 1; ///< List of ledgers.
  }

  /**
   * Get page contents.
   */
  message GetPage {
    bytes data = 1; ///< MessagePack-encoded page contents.
    /**
     * Last time the page was changed, in milliseconds since the Unix epoch.
     *
     * If not set, the time is unknown.
     */
    optional fixed64 updated_at = 2;
  }

  /**
   * Sync page contents.
   */
  message SyncPage {
    bytes data = 1; ///< MessagePack-encoded contents of the page after the synchronization.
    fixed64 updated_at = 2; ///< Last time the page was changed, in milliseconds since the Unix epoch.
  }

  /**
   * Subscribe to page notifications.
   */
  message Subscribe {
  }

  /**
   * Unsubscribe from page notifications.
   */
  message Unsubscribe {
  }

  /**
   * Notify about page changes.
   */
  message NotifyPageChanged {
  }

  Result result = 1; ///< Result code.
  optional string error_message = 2; ///< Error message.

  oneof response { ///< Response data.
    ListLedgers list_ledgers = 3;
    GetPage get_page = 4;
    SyncPage sync_page = 5;
    Subscribe subscribe = 6;
    Unsubscribe unsubscribe = 7;
    NotifyPageChanged notify_page_changed = 8;
  }
}
