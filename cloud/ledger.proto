syntax = "proto3";

package particle.cloud.ledger;

import "nanopb.proto";

/**
 * Ledger scope.
 */
enum Scope {
  SCOPE_UNKNOWN = 0; ///< Unknown scope.
  SCOPE_DEVICE = 1; ///< Device scope.
  SCOPE_PRODUCT = 2; ///< Product scope.
  SCOPE_OWNER = 3; ///< Owner scope.
}

/**
 * Sync direction.
 */
enum SyncDirection {
  SYNC_DIRECTION_UNKNOWN = 0; ///< Unknown direction.
  SYNC_DIRECTION_DEVICE_TO_CLOUD = 1; ///< Device to cloud.
  SYNC_DIRECTION_CLOUD_TO_DEVICE = 2; ///< Cloud to device.
}

/**
 * Get the ledger info.
 *
 * This request is sent by the device.
 */
message GetInfoRequest {
  /**
   * Names of the ledgers for which to request the info.
   */
  repeated string ledgers = 1;
}

/**
 * Response for a `GetInfoRequest`.
 */
message GetInfoResponse {
  /**
   * Ledger info.
   */
  message Ledger {
    string name = 1 [(nanopb).max_length = 32]; ///< Ledger name.
    Scope scope = 2; ///< Ledger scope.
    SyncDirection sync_direction = 3; ///< Sync direction.
    /**
     * Time the ledger was last updated according to the server, in milliseconds since the Unix epoch.
     *
     * If 0, the time is unknown.
     */
    fixed64 last_updated = 4;
  }

  /**
   * Ledger info.
   *
   * If the request contained an unknown ledger name or the requested ledger is inaccessible by the
   * device, the info about the respective ledger would be omitted.
   */
  repeated Ledger ledgers = 1;
}

/**
 * Synchronize the contents of a ledger.
 *
 * This request is sent by the device or server in order to synchronize the contents of a device-to-
 * cloud or cloud-to-device ledger respectively.
 *
 * The device can send this request at any time in order to synchronize a device-to-cloud ledger.
 *
 * Synchronization of a cloud-to-device ledger is always initiated by the device by either sending a
 * `BeginSyncRequest` or setting the `sync` field of the respective `NotifyUpdateResponse` to `true`.
 * The contents of the ledger is then sent by the server in a separate `SyncRequest`.
 */
message SyncRequest {
  string name = 1 [(nanopb).max_length = 32]; ///< Ledger name.
  bytes data = 2; ///< Contents of the ledger.
  /**
   * Time the ledger was last updated, in milliseconds since the Unix epoch.
   *
   * If 0, the time is unknown.
   */
  fixed64 last_updated = 3;
}

/**
 * Response for a `SyncRequest`.
 */
message SyncResponse {
  /**
   * Time the ledger was synchronized, in milliseconds since the Unix epoch.
   */
  fixed64 last_synced = 1;
}

/**
 * Request synchronization of a cloud-to-device ledger.
 *
 * This request is sent by the device.
 */
message BeginSyncRequest {
  string name = 1 [(nanopb).max_length = 32]; ///< Ledger name.
  /**
   * Time the ledger was last updated according to the device, in milliseconds since the Unix epoch.
   *
   * If 0, the time is unknown.
   */
  fixed64 last_updated = 2;
}

/**
 * Response for a `BeginSyncRequest`.
 */
message BeginSyncResponse {
  /**
   * Time the ledger was last updated, in milliseconds since the Unix epoch.
   */
  fixed64 last_updated = 1;
  /**
   * Whether a `SyncRequest` is pending for this ledger.
   */
  bool sync_pending = 2;
}

/**
 * Subscribe to notifications about updates made to one or multiple cloud-to-device ledgers.
 *
 * Subscriptions listed in this request will replace all the subscriptions currently registered on
 * the server.
 *
 * This request is sent by the device.
 */
message SubscribeRequest {
  /**
   * Names of the ledgers to subscribe to.
   */
  repeated string ledgers = 1;
}

/**
 * Response for a `SubscribeRequest`.
 */
message SubscribeResponse {
  /**
   * Ledger info.
   */
  message Ledger {
    string name = 1 [(nanopb).max_length = 32]; ///< Ledger name.
    /**
     * Time the ledger was last updated, in milliseconds since the Unix epoch.
     */
    fixed64 last_updated = 2;
  }

  /**
   * Ledger info.
   */
  repeated Ledger ledgers = 1;
}

/**
 * Notify the device that a cloud-to-device ledger was updated.
 *
 * This request is sent by the server.
 */
message NotifyUpdateRequest {
  string name = 1 [(nanopb).max_length = 32]; ///< Ledger name.
  /**
   * Time the ledger was updated, in milliseconds since the Unix epoch.
   */
  fixed64 last_updated = 2;
}

/**
 * Response for a `NotifyUpdateRequest`.
 */
message NotifyUpdateResponse {
  /**
   * Whether synchronization is requested for this ledger by the device.
   */
  bool sync = 1;
}
