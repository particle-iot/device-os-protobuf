syntax = "proto3";
package particle.ctrl;

import "common.proto";

enum StorageType {
  INVALID_STORAGE = 0;
  INTERNAL = 1; // Internal flash
}

enum SectionType {
  INVALID_SECTION = 0;
  FIRMWARE = 1; // Firmware module
  OTA_BACKUP = 2; // OTA backup
  FACTORY_BACKUP = 3; // Factory backup
  CONFIG = 4; // Device configuration
  EEPROM = 5; // Emulated EEPROM
}

enum FirmwareModuleType {
  INVALID_FIRMWARE_MODULE = 0;
  BOOTLOADER = 1; // Bootloader
  SYSTEM_PART = 2; // System part
  USER_PART = 3; // User part
  MONO_FIRMWARE = 4; // Monolithic firmware
}

enum SectionFlag {
  NO_SECTION_FLAGS = 0;
  CAN_READ = 0x01; // Section data is readable
  CAN_WRITE = 0x02; // Section data is writable
  CAN_CLEAR = 0x04; // Section can be cleared
  CAN_GET_SIZE = 0x08; // Actual size of the section data can be determined
  NEED_CLEAR = 0x10; // Section needs to be cleared before writing
}

// CTRL_REQUEST_START_FIRMWARE_UPDATE (250)
message StartFirmwareUpdateRequest {
  uint32 size = 1; // Size of the firmware data
}

message StartFirmwareUpdateReply {
  uint32 chunk_size = 1; // Maximum chunk size
}

// CTRL_REQUEST_FINISH_FIRMWARE_UPDATE (251)
message FinishFirmwareUpdateRequest {
  bool validate_only = 1;
}

message FinishFirmwareUpdateReply {
}

// CTRL_REQUEST_CANCEL_FIRMWARE_UPDATE (252)
message CancelFirmwareUpdateRequest {
}

message CancelFirmwareUpdateReply {
}

// CTRL_REQUEST_FIRMWARE_UPDATE_DATA (253)
message FirmwareUpdateDataRequest {
  bytes data = 1;
}

message FirmwareUpdateDataReply {
}

// CTRL_REQUEST_DESCRIBE_STORAGE (260)
message DescribeStorageRequest {
}

message DescribeStorageReply {
  message Section {
    message FirmwareModule {
      FirmwareModuleType type = 1;
      uint32 index = 2;
    }
    SectionType type = 1;
    uint32 size = 2;
    uint32 flags = 3;
    FirmwareModule firmware_module = 4;
  }
  message Storage {
    StorageType type = 1;
    uint32 flags = 2;
    repeated Section sections = 3;
  }
  repeated Storage storage = 1;
}

// CTRL_REQUEST_READ_SECTION_DATA (261)
message ReadSectionDataRequest {
  uint32 storage = 1; // Storage index
  uint32 section = 2; // Section index
  uint32 offset = 3;
  uint32 size = 4;
}

message ReadSectionDataReply {
  bytes data = 1;
}

// CTRL_REQUEST_WRITE_SECTION_DATA (262)
message WriteSectionDataRequest {
  uint32 storage = 1; // Storage index
  uint32 section = 2; // Section index
  uint32 offset = 3;
  bytes data = 4;
}

message WriteSectionDataReply {
}

// CTRL_REQUEST_CLEAR_SECTION_DATA (263)
message ClearSectionDataRequest {
  uint32 storage = 1; // Storage index
  uint32 section = 2; // Section index
}

message ClearSectionDataReply {
}

// CTRL_REQUEST_GET_SECTION_DATA_SIZE (264)
message GetSectionDataSizeRequest {
  uint32 storage = 1; // Storage index
  uint32 section = 2; // Section index
}

message GetSectionDataSizeReply {
  uint32 size = 1;
}
