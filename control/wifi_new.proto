syntax = "proto3";

package particle.ctrl.wifi;
option java_package = "io.particle.firmwareprotos.ctrl.wifi";

import "extensions.proto";
import "common.proto";

/**
 * WiFi security types.
 *
 * Note: The values of this enum should match the values defined by the `WifiSecurity` enum in
 * the firmware.
 */
enum Security {
  NO_SECURITY = 0; // No security
  WEP = 1; // WEP
  WPA_PSK = 2; // WPA PSK
  WPA2_PSK = 3; // WPA2 PSK
  WPA_WPA2_PSK = 4; // WPA/WPA2 PSK
  WPA_ENTERPRISE = 5;
  WPA2_ENTERPRISE = 6;
  WPA_WPA2_ENTERPRISE = 7;
  WPA3_PSK = 8;
  WPA2_WPA3_PSK = 9;
  WPA3_ENTERPRISE = 10;
  WPA2_WPA3_ENTERPRISE = 11;
}

/**
 * Network credential types.
 *
 * Note: The values of this enum should match the values defined by the `WiFiCredentials::Type` enum
 * in the firmware.
 */
enum CredentialsType {
  NO_CREDENTIALS = 0; // No WiFi credentials
  PASSWORD = 1; // WiFi password
  EAP = 2;
}

/**
 * EAP types.
 *
 * Note: The values of this enum should match the values defined by the `WiFiCredentials::EapType` enum
 * in the firmware.
 */
enum EapType {
  INVALID      = 0;   /* Invalid */
  IDENTITY     = 1;   /* RFC 3748 */
  NOTIFICATION = 2;   /* RFC 3748 */
  NAK          = 3;   /* Response only, RFC 3748 */
  MD5          = 4;   /* RFC 3748 */
  OTP          = 5;   /* RFC 3748 */
  GTC          = 6;   /* RFC 3748 */
  TLS          = 13;  /* RFC 2716 */
  LEAP         = 17;  /* Cisco proprietary */
  SIM          = 18;  /* draft-haverinen-pppext-eap-sim-12.txt */
  TTLS         = 21;  /* draft-ietf-pppext-eap-ttls-02.txt */
  AKA          = 23;  /* draft-arkko-pppext-eap-aka-12.txt */
  PEAP         = 25;  /* draft-josefsson-pppext-eap-tls-eap-06.txt */
  MSCHAPV2     = 26;  /* draft-kamath-pppext-eap-mschapv2-00.txt */
  TLV          = 33;  /* draft-josefsson-pppext-eap-tls-eap-07.txt */
  FAST         = 43;  /* draft-cam-winget-eap-fast-00.txt */
  PAX          = 46;  /* draft-clancy-eap-pax-04.txt */
  EXPANDED_NAK = 253; /* RFC 3748 */
  WPS          = 254; /* Wireless Simple Config */
  PSK          = 255; /* EXPERIMENTAL - type not yet allocated draft-bersani-eap-psk-09 */
  NON_EAP      = 1000;/* Non-EAP authentication protocol e.g. CHAP, PAP etc */
}

/**
 * Non-EAP authentication protocols.
 *
 * Note: The values of this enum should match the values defined by the `WiFiCredentials::AuthenticationProtocol` enum
 * in the firmware.
 */
enum AuthenticationProtocol {
  AUTH_INVALID = 0;
  AUTH_EAP = 1;
  AUTH_PAP = 2;
  AUTH_CHAP = 3;
  AUTH_MSCHAP = 4;
  AUTH_MSCHAPV2 = 5;
}

/**
 * Common EAP credentials.
 */
message EapCredentials {
  option (nanopb_msgopt).submsg_callback = true;

  EapType type = 1;
  /* Defines the non-EAP authentication protocol when type == NON_EAP */
  AuthenticationProtocol protocol = 2;
  oneof credentials {
    EapCredentialsPeap peap = 3;
    EapCredentialsTls tls = 4;
    EapCredentialsTtls ttls = 5;
    EapCredentialsFast fast = 6;
    EapCredentialsIdentityPassword identity_password = 7;
  }

  EapCredentials inner = 50 [(nanopb).type = FT_CALLBACK]; /* For tunneled types */
}

/**
 * Common credentials structure for username/password EAP/non-EAP methods.
 */
message EapCredentialsIdentityPassword {
  string identity = 1;
  string password = 2;
}

/**
 * EAP-PEAP credentials
 *
 * draft-josefsson-pppext-eap-tls-eap-06.txt
 */
message EapCredentialsPeap {
  string identity = 1; /* This is the outer (PEAP) identity, optional */
  string ca_certificate = 2; /* optional */
}

/**
 * EAP-TLS credentials
 *
 * RFC 2716
 */
message EapCredentialsTls {
  string identity = 1;
  string user_certificate = 2;
  string private_key = 3;
  string private_key_password = 4; /* optional */
  string ca_certificate = 5; /* optional */
}

/**
 * EAP-TTLS credentials
 *
 * draft-ietf-pppext-eap-ttls-02.txt
 */
message EapCredentialsTtls {
  string identity = 1; /* This is the outer tunnel identity, optional */
  string domain = 2; /* optional */
  string ca_certificate = 3; /* optional */
}

/**
 * EAP-FAST credentials
 *
 * draft-cam-winget-eap-fast-00.txt
 */
message EapCredentialsFast {
  string identity = 1; /* optional */
  /* Protected Access Credential */
  bytes pac = 2; /* optional */
}

/**
 * Network credentials.
 */
message Credentials {
  CredentialsType type = 1;
  /* oneof? */
  string password = 2;
  // Using FT_CALLBACK to simplify parsing across various messages that include Credentials
  EapCredentials eap = 3 [(nanopb).type = FT_CALLBACK];
}

/**
 * Join a new network.
 *
 * On success, the network credentials get saved to a persistent storage.
 */
message JoinNewNetworkRequest {
  option (type_id) = 500; // CTRL_REQUEST_WIFI_JOIN_NEW_NETWORK
  string ssid = 1; // Network SSID
  bytes bssid = 2 [(nanopb).max_size = 6]; // Network address
  Security security = 3; // Network security
  Credentials credentials = 4; // Network credentials
}

message JoinNewNetworkReply {
}

/**
 * Join a known network.
 */
message JoinKnownNetworkRequest {
  option (type_id) = 501; // CTRL_REQUEST_WIFI_JOIN_KNOWN_NETWORK
  string ssid = 1; // Network SSID
}

message JoinKnownNetworkReply {
}

/**
 * Get the list of known networks.
 */
message GetKnownNetworksRequest {
  option (type_id) = 502; // CTRL_REQUEST_WIFI_GET_KNOWN_NETWORKS
}

message GetKnownNetworksReply {
  message Network {
    string ssid = 1; // Network SSID
    Security security = 2; // Network security
    CredentialsType credentials_type = 3; // Network credentials
  }

  repeated Network networks = 1; // All known networks
}

/**
 * Remove the network from the list of known networks.
 */
message RemoveKnownNetworkRequest {
  option (type_id) = 503; // CTRL_REQUEST_WIFI_REMOVE_KNOWN_NETWORK
  string ssid = 1; // Network SSID
}

message RemoveKnownNetworkReply {
}

/**
 * Remove all known networks.
 */
message ClearKnownNetworksRequest {
  option (type_id) = 504; // CTRL_REQUEST_WIFI_CLEAR_KNOWN_NETWORKS
}

message ClearKnownNetworksReply {
}

/**
 * Get the current network.
 *
 * This request gets the network which the device is currently connected to.
 */
message GetCurrentNetworkRequest {
  option (type_id) = 505; // CTRL_REQUEST_WIFI_GET_CURRENT_NETWORK
}

message GetCurrentNetworkReply {
  string ssid = 1; // Network SSID
  bytes bssid = 2 [(nanopb).max_size = 6]; // Network address
  int32 channel = 3; // Network channel
  int32 rssi = 4; // Network signal strength
}

/**
 * Scan for networks.
 */
message ScanNetworksRequest {
  option (type_id) = 506; // CTRL_REQUEST_WIFI_SCAN_NETWORKS
}

message ScanNetworksReply {
  message Network {
    string ssid = 1; // Network SSID
    bytes bssid = 2 [(nanopb).max_size = 6]; // Network address
    Security security = 3; // Network security
    int32 channel = 4; // Network channel
    int32 rssi = 5; // Network signal strength
  }

  repeated Network networks = 1; // All found networks
}
